import requests
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.types import ParseMode
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types.message import ContentType
from aiogram.utils import executor
from aiogram.utils.emoji import emojize
from aiogram.utils.markdown import text, bold, italic, code

from config import TOKEN

from PostalService.src.recognizeHandwriteText import *
from PostalService.src.recognizeTypewrittenText import recognize_typewritten_text
# from PostalService.src.text_classificator import text_type_classification
from PostalService.src.recognizeAllTypesTexts import recognize_all_types_of_written_text

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

error_process_messages = [
    '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å :man_shrugging:'
]

prediction_process_messages = [
    '–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∑–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω–æ \n\n@',
    '–ü–æ—Ö–æ–∂–µ –Ω–∞ \n\n@',
    '–ö–∞–∂–µ—Ç—Å—è, —Ç—É—Ç –Ω–∞–ø–∏—Å–∞–Ω–æ: \n\n@',
    '–î—É–º–∞—é, —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ \n\n@',
    '@\n\n –£–≥–∞–¥–∞–ª?'
]

demo_process_messages = [
    '—Ä–∞–∑ —Å–∞–º –ø–∏—Å–∞—Ç—å –Ω–µ —Ö–æ—á–µ—à—å, –ø–æ–∏—â—É —É —Å–µ–±—è —á—Ç–æ-–Ω–∏–±—É–¥—å...\n–Ω–∞—à–µ–ª!',
    '–ø–æ–Ω–∏–º–∞—é, –Ω–µ —É –≤—Å–µ—Ö –µ—Å—Ç—å –±—É–º–∞–≥–∞ —Å —Ä—É—á–∫–æ–π –ø–æ–¥ —Ä—É–∫–æ–π\n–¥–µ—Ä–∂–∏',
    '–ø–µ—Ä–µ–¥–∞—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–ø—É—Ç–Ω–∏–∫... :thinking_face:',
    '—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–≤—è–∑—å —Å –∫–æ—Å–º–æ—Å–æ–º... :thinking_face:',
]

char_list = list('–∞–±–≤–≥–¥–µ–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è ')
decoder_mapping = {'bestpath': DecoderType.BestPath,
                   'beamsearch': DecoderType.BeamSearch,
                   'wordbeamsearch': DecoderType.WordBeamSearch}
decoder_type = decoder_mapping["beamsearch"]

model = Model(char_list, decoder_type, must_restore=True)

img = None

num_demo_img = 0


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    start_kb = ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=True
    ).add(KeyboardButton('/help'))

    await message.reply(text('–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø - –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Ç–µ–∫—Å—Ç —Å –ø–æ—á—Ç–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–π. üòè'
                             '\n\n–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥!'),
                        reply_markup=start_kb, parse_mode=ParseMode.MARKDOWN)


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    demo_b = KeyboardButton('/demo')
    info_b = KeyboardButton('/info')
    help_kb = ReplyKeyboardMarkup(
        resize_keyboard=True, one_time_keyboard=False
    ).add(demo_b).add(info_b)

    msg = emojize(
        text(
            bold('‚ùó‚ùó‚ùó–ü–æ–º–∏–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞–∫ –†—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ, —Ç–∞–∫ –∏ –ú–∞—à–∏–Ω–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, '
                 '–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏‚ùó‚ùó‚ùó'),

            '\n\n–î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ ' + bold('–õ–Æ–ë–û–ì–û —Ç–∏–ø–∞') + ':',
            '‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—á—Ç–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∞ —è –ø–æ–ø—Ä–æ–±—É—é —É–∑–Ω–∞—Ç—å, —á—Ç–æ —Ç–∞–º –Ω–∞–ø–∏—Å–∞–Ω–æ',

            '\n\n–î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ' + bold('–¢–û–õ–¨–ö–û –º–∞—à–∏–Ω–æ–ø–∏—Å–Ω–æ–≥–æ') + ' (' + bold('–ø–µ—á–∞—Ç–Ω–æ–≥–æ') + ')' + ' —Ç–µ–∫—Å—Ç–∞:',
            '‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –ø–æ—á—Ç–æ–≤–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –±–µ–∑ —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞, '
            '–∏–Ω–∞—á–µ —è –∑–∞–ø—É—Ç–∞—é—Å—å :smiling_face_with_tear:',

            '\n–î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è ' + italic('–¢–û–õ–¨–ö–û —Ä—É–∫–æ–ø–∏—Å–Ω–æ–≥–æ') + ' —Ç–µ–∫—Å—Ç–∞:',
            '‚Ä¢ –ü—Ä–∏—Å—ã–ª–∞–π —è—Ä–∫–æ–µ –∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ, —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –∞ —è –ø–æ–ø—Ä–æ–±—É—é —É–≥–∞–¥–∞—Ç—å, —á—Ç–æ —Ç—ã —Ç–∞–º –Ω–∞–ø–∏—Å–∞–ª. ',

            bold('\n\n–î–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:'),
            '/demo - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ (9 –≤–∞—Ä–∏–∞—Ü–∏–π)',
            '/info - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ',
            sep='\n'))

    await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN, reply_markup=help_kb)


@dp.message_handler(commands=['demo'])
async def process_photo_command(msg: types.Message):

    global num_demo_img

    num_demo_img += 1

    if num_demo_img >= 9:
        num_demo_img = 0

    global img

    img_path = f"./Demonstration/demo_{num_demo_img}.png"

    with open(img_path, "rb") as image:

        img = image

        caption = None

        if num_demo_img == 0 or num_demo_img == 2 or num_demo_img == 8:
            recognized = recognize_typewritten_text(img)
            i = random.randint(0, len(prediction_process_messages) - 1)
            caption = prediction_process_messages[i % len(prediction_process_messages)].replace('@',
                                                                                                ' '.join(recognized))
        if num_demo_img == 1 or num_demo_img == 3 or num_demo_img == 4 or num_demo_img == 5 or num_demo_img == 7:
            recognized, recognized_corrected = bot_run_model(model, img)
            i = random.randint(0, len(prediction_process_messages) - 1)
            caption = prediction_process_messages[i % len(prediction_process_messages)].replace('@',
                                                                                                recognized_corrected)
        if num_demo_img == 6:
            recognized = recognize_all_types_of_written_text(img, model)
            i = random.randint(0, len(prediction_process_messages) - 1)
            caption = prediction_process_messages[i % len(prediction_process_messages)].replace('@',
                                                                                                ' '.join(recognized))

        await bot.send_photo(msg.from_user.id, types.InputFile(img_path, "rb"),
                             caption=emojize(caption))


def get_path(hash_name):
    link = 'https://api.telegram.org/bot<TOKEN>/getFile?file_id=<FILE_ID>'.replace('<TOKEN>', TOKEN)
    path = 'https://api.telegram.org/file/bot<TOKEN>/<FILE_PATH>'.replace('<TOKEN>', TOKEN)
    link = link.replace('<FILE_ID>', hash_name)
    r = requests.get(url=link)
    file_path = r.json()['result']['file_path']
    file_path = path.replace('<FILE_PATH>', file_path)
    return file_path


@dp.message_handler(commands=['info'])
async def process_info_command(msg: types.Message):
    info = text('–°–æ–∑–¥–∞–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π MasterMinds' + '\n\n–û –ø—Ä–æ–µ–∫—Ç–µ: project.ai-info.ru/teams/masterminds' +
                "\nGitHub: https://github.com/GamerZombar/PostalService" +
                "\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ - –∫–æ–º–∞–Ω–¥–∞ /help")
    await bot.send_message(msg.from_user.id, info)


@dp.callback_query_handler(text="typewritten_text")
async def recognize_text(call: types.CallbackQuery):
    recognized = recognize_typewritten_text(img)
    i = random.randint(0, len(prediction_process_messages) - 1)
    caption = prediction_process_messages[i % len(prediction_process_messages)].replace('@', ' '.join(recognized))
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=caption)


@dp.callback_query_handler(text="handwritten_text")
async def recognize_text(call: types.CallbackQuery):
    recognized, recognized_corrected = bot_run_model(model, img)
    print(recognized, recognized_corrected)

    i = random.randint(0, len(prediction_process_messages) - 1)
    caption = prediction_process_messages[i % len(prediction_process_messages)].replace('@', recognized_corrected)

    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=caption)


@dp.callback_query_handler(text="all_types_text")
async def recognize_text(call: types.CallbackQuery):
    print("\n–ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É. –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç " + str(call.message.date))
    recognized = recognize_all_types_of_written_text(img, model)

    i = random.randint(0, len(prediction_process_messages) - 1)
    caption = prediction_process_messages[i % len(prediction_process_messages)].replace('@', ' '.join(recognized))
    await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                text=caption)


@dp.message_handler(content_types=['photo'])
async def echo_img(msg: types.Message):
    img_hash = msg.photo[-1]['file_id']
    url = get_path(img_hash)

    global img
    img = requests.get(url, stream=True).raw


    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.KeyboardButton(text="–¢–æ–ª—å–∫–æ –º–∞—à–∏–Ω–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="typewritten_text"),
                 types.KeyboardButton(text="–¢–æ–ª—å–∫–æ —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç", callback_data="handwritten_text"))

    keyboard.add(types.InlineKeyboardButton(text="–¢–µ–∫—Å—Ç –õ–Æ–ë–û–ì–û —Ç–∏–ø–∞",
                                            callback_data="all_types_text"))
    await msg.reply("–ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å?", reply_markup=keyboard)


@dp.message_handler(content_types=ContentType.ANY)
async def unknown_message(msg: types.Message):
    i = random.randint(0, len(error_process_messages) - 1)
    message_text = text(emojize(error_process_messages[i]),
                        emojize(text(italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å')),
                        code('–∫–æ–º–∞–Ω–¥–∞'), '/help')
    await msg.reply(message_text, parse_mode=ParseMode.MARKDOWN)


if __name__ == '__main__':
    executor.start_polling(dp)
